name: Release to preview nodes
on:
  workflow_dispatch:
  # push:
    # branches:
      # - develop
    # paths-ignore:
      # - .github/**

run-name: ${{ github.workflow }} by @${{ github.actor }} from ${{ github.ref_name }}

jobs:
  release:
    runs-on: self-hosted
    environment: Preview
    strategy:
      fail-fast: false
      matrix:
        node: [
          BEAM_13337_RESERVOIR_MAIN,
          BEAM_13337_RESERVOIR_SECONDARY,
          
          IMX_13473_RESERVOIR_MAIN,
          IMX_13473_RESERVOIR_SECONDARY
        ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get working branch
        id: get-commit-branch
        run: |
          response=$(ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets[matrix.node] }} "cd /home/ubuntu/beam-indexer && sudo git rev-parse --abbrev-ref HEAD")
          echo "response=$response" >> $GITHUB_OUTPUT
        shell: bash

      - name: Get working commit hash
        id: get-commit-hash
        run: |
          response=$(ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets[matrix.node] }} "cd /home/ubuntu/beam-indexer && sudo git rev-parse HEAD")
          echo "response=$response" >> $GITHUB_OUTPUT
        shell: bash

      - name: Print working branch and commit
        run: echo ${{ steps.get-commit-branch.outputs.response }} - ${{ steps.get-commit-hash.outputs.response }}
        shell: bash

      - name: Checkout latest code
        id: checkout-latest-code
        uses: ./.github/actions/send-remote-commands
        with:
          ssh-host: ${{ secrets[matrix.node] }}
          ssh-command: |
            echo \"Start reservoir deployment\"

            cd /home/ubuntu/
            APP_01=beam-indexer-build-01
            APP_02=beam-indexer-build-02
            APP_CURRENT=\$(readlink beam-indexer)
            echo \"APP_CURRENT \${APP_CURRENT}\"

            if [[ \${APP_CURRENT} == \${APP_01} ]]; then
              APP_NEW=\${APP_02}
            else
              APP_NEW=\${APP_01}
            fi

            echo \"Deploying new version at directory \${APP_NEW}\"
            cd \${APP_NEW}

            sudo git fetch origin

            if sudo git show-ref --verify --quiet refs/heads/${{ github.ref_name }}; then
              sudo git checkout ${{ github.ref_name }}
            else
              sudo git checkout -b ${{ github.ref_name }}
            fi

            sudo git reset --hard HEAD
            sudo git merge origin/${{ github.ref_name }}

            sudo yarn --frozen-lockfile
            BUILD_OUTPUT=\$(sudo yarn build 2>&1)
            if [[ \"\$BUILD_OUTPUT\" == *\"error\"* ]]; then
              echo \"Build failed (error keyword detected), stopping the workflow.\"
              exit 1
            fi
            
            echo \"Build succeeded.\"
            exit 0


      - name: Replace working directory
        uses: ./.github/actions/send-remote-commands
        with:
          ssh-host: ${{ secrets[matrix.node] }}
          ssh-command: |
            cd /home/ubuntu
            APP_01=beam-indexer-build-01
            APP_02=beam-indexer-build-02
            APP_CURRENT=\$(readlink beam-indexer)
            echo \"APP_CURRENT \${APP_CURRENT}\"

            if [[ \${APP_CURRENT} == \${APP_01} ]]; then
              APP_NEW=\${APP_02}
            else
              APP_NEW=\${APP_01}
            fi

            sudo systemctl stop reservoir
            sudo rm beam-indexer

            sudo ln -s \${APP_NEW} beam-indexer
            sudo systemctl start reservoir
            echo \"Deployed new version at \$(readlink beam-indexer).\"

      - name: Check service status
        id: get-service-status
        run: |
          response=$(ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets[matrix.node] }} "sleep 20; echo \$(curl -o /dev/null -s -w %{http_code} localhost:3000)")
          echo "response=$response" >> $GITHUB_OUTPUT
        shell: bash

      - name: Revert on failure
        if: steps.get-service-status.outputs.response != 200
        uses: ./.github/actions/send-remote-commands
        with:
          ssh-host: ${{ secrets[matrix.node] }}
          ssh-command: |
            sudo systemctl stop reservoir
            cd /home/ubuntu
            APP_01=beam-indexer-build-01
            APP_02=beam-indexer-build-02
            APP_CURRENT=$(readlink beam-indexer)

            if [[ \${APP_CURRENT} == \${APP_01} ]]; then
              APP_ROLLBACK=\${APP_02}
            else
              APP_ROLLBACK=\${APP_01}
            fi

            sudo rm beam-indexer
            sudo ln -s \${APP_ROLLBACK} beam-indexer
            sudo systemctl start reservoir
            echo \"Reverted to previous version at \$(readlink beam-indexer).\"

      - name: Fail job on revert or other failure
        if: steps.get-service-status.outputs.response != 200
        run: exit 1

      - name: Report status
        if: steps.get-service-status.outputs.response == 200
        run: echo "${{ steps.get-service-status.outputs.response }} - Service is up and running."
        shell: bash
